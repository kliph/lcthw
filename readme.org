#+options: num:nil toc:nil

* Learn C the Hard Way
[[http://c.learncodethehardway.org/book/]]
** Exercise 1
*** Compiler warnings
To build a file with the all compiler warnings on use:

#+BEGIN_SRC sh
  CFLAGS="-Wall" make ex1

#+END_SRC
** Exercise 2

*** Using Make
[[http://mrbook.org/tutorials/make/]]

**** A very simple Makefile

#+BEGIN_EXAMPLE
CFLAGS=-Wall -g

clean:
     rm -f ex1 # Make sure it's a tab

#+END_EXAMPLE

** Exercise 3
*** Online research
All of the standard =printf= C escape codes:
[[http://www.phys.unsw.edu.au/~mcba/phys2020/notes/escape.html]]


All of the standard =printf= C format strings:
[[http://www.cprogramming.com/tutorial/printf-format-strings.html]]
** Exercise 4
*** Installing Valgrind
**** Valgrind error on Snow Leopard

I encountered a problem using valgrind version =valgrind-3.8.1=
installed via macports on Mac OS X 10.6.8.

A fix can be found at:
[[https://bugs.kde.org/show_bug.cgi?id%3D262390#c16][https://bugs.kde.org/show_bug.cgi?id=262390#c16]]

Executing:
#+BEGIN_SRC sh
  sudo /usr/lcoal/hermes/bin/hermesctl unload

#+END_SRC

fixes valgrind.

#+BEGIN_SRC sh
  valgrind -v ./ex4
  valgrind: mmap-FIXED(0x100000000, 4096) failed in UME (load_segment1).

   ,*sudo /usr/local/hermes/bin/hermesctl unload

  HermesAudio unload failed: not loaded

  valgrind -v ./ex4
  ==931== Memcheck, a memory error detector
  ==931== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
  ...

#+END_SRC
** Exercise 5
*** The mysterious arguments to the main function
#+BEGIN_SRC c
  int main(int argc, char *argv[])
  {

    return 0;
  }


#+END_SRC

In =c= functions return an =int= and accept two parameters: =int argc=
for the argument count and an array of string arguments
=char *argv[]=.
** Exercise 6
"You'll notice that C makes a distinction between single-quote for
=char= and double-quote for =char[]= or strings."

And that's silly, yo.

*** Char for single characters
Declared with =char= and written in ' single quotes
*** Char for strings
Declared with =char= and written in " double quotes.
** Exercise 7
** Exercise 8
The =sizeof()= function returns the size of a thing in bytes.
*** String quirks in C
One tricky thing about C is that it stores a null character =\0= at
the end of all strings.  =printf()= is "smart" enough to know not to
print =\0=.  (I'm not even sure a terminal can display the null
character!)

In other words, C stores strings as an array of bytes terminated by
the null character =\0=.  See:
[[https://en.wikipedia.org/wiki/Null-terminated_string]].

Emacs eshell writes the null character =\0= as =^@=, at least in the
output from =valgrind=.

*** Sixteen.c
A diversion looking at how 16-bit integers are stored in C.  Not sure
about the problem I'm seeing when adding 1 to an =int16_t= in a
=printf()= statement:

#+BEGIN_SRC c
    int16_t n1 = 32767;
    int16_t n2 = n1 + 1;
    printf("The size of an int16_t is %ld\n", sizeof(int16_t));
    printf("%d\n", n1);
    printf("Since it's signed, numbers above halfway underflow\n");
    printf("So one more and it becomes: %d\n", n2);
    printf("NOTE: If you do the addition without specifically\n");
    printf("casting the int as int16_t, it looks like C\n");
    printf("automatically makes it a larger int? E.g.: %d\n", n1 + 1);


#+END_SRC

Maybe it has something to do with =printf()= itself or the =%d= flag?
** Exercise 9
Nice quote that the source of a lot of C bugs is using strings.  There
will be a workaround for using C strings later on.
** Exercise 10
It seems like there's a maximum of 99,999 arguments in C--plenty.
Running =valgrind ./ex10= with 100,000 arguments does not print any
output.

Trying to replicate this experiment with 4,294,967,296 arguments hard
locked the computer for â‰ˆ 15 minutes before I shut it down.
